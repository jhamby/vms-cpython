# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rec', [dirname(__file__)])
        except ImportError:
            import _rec
            return _rec
        if fp is not None:
            try:
                _mod = imp.load_module('_rec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rec = swig_import_helper()
    del swig_import_helper
else:
    import _rec
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new():
    return _rec.new()
new = _rec.new

def delete(arg1):
    return _rec.delete(arg1)
delete = _rec.delete

def getstr(arg1, arg2):
    return _rec.getstr(arg1, arg2)
getstr = _rec.getstr

def getint(arg1, arg2):
    return _rec.getint(arg1, arg2)
getint = _rec.getint

def addstr(arg1, arg2, arg3, arg4):
    return _rec.addstr(arg1, arg2, arg3, arg4)
addstr = _rec.addstr

def addint(arg1, arg2, arg3, arg4):
    return _rec.addint(arg1, arg2, arg3, arg4)
addint = _rec.addint

def load(arg1, arg2, arg3):
    return _rec.load(arg1, arg2, arg3)
load = _rec.load

def addfloat(arg1, arg2, arg3, arg4):
    return _rec.addfloat(arg1, arg2, arg3, arg4)
addfloat = _rec.addfloat

def getfloat(arg1, arg2):
    return _rec.getfloat(arg1, arg2)
getfloat = _rec.getfloat

def addnum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _rec.addnum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
addnum = _rec.addnum

def gethex(arg1, arg2):
    return _rec.gethex(arg1, arg2)
gethex = _rec.gethex

def getnum(arg1, arg2):
    return _rec.getnum(arg1, arg2)
getnum = _rec.getnum

def setstr(arg1, arg2, arg3):
    return _rec.setstr(arg1, arg2, arg3)
setstr = _rec.setstr

def setint(arg1, arg2, arg3):
    return _rec.setint(arg1, arg2, arg3)
setint = _rec.setint

def setnum(arg1, arg2, arg3):
    return _rec.setnum(arg1, arg2, arg3)
setnum = _rec.setnum

def setfloat(arg1, arg2, arg3):
    return _rec.setfloat(arg1, arg2, arg3)
setfloat = _rec.setfloat
# This file is compatible with both classic and new-style classes.


